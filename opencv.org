# OpenCV Note

* Errors
** 1. undefined reference to symbol '_zn2cv6imreaderkns_6stringei'

  --- imread/imwrite and friends were moved from highgui to a new
  imgcodecs module.
  
  so you will have to
  
  #include "opencv2/imgcodecs.hpp"
  
  and link
  
  -lopencv_imgcodecs
  
  btw, include path should be:
  
  -I/usr/local/include
  
  not
  
  -I/usr/local/include/opencv
  
  http://answers.opencv.org/question/46755/first-example-code-error/
  ---

  不过不需要将包含目录改为 -I/usr/local/include,

  至少对于 OpenCV3 来说包含目录为 /usr/local/include/opencv2 即可

** 2. /usr/bin/ld: cannot find -lippicv
   (collect2: error: ld returned 1 exit status
   Makefile:135: recipe for target 'opencv' failed
   make: *** [opencv] Error 1)
   当执行的命令为 g++ ... `pkg-config --cflags --libs opencv` 时出现

   解决方法:
   将下载的 ippicv_*.tgz 解压, 将其lib目录下的 ia32或intel64(依据自己平台选择)
下的 libippicv.a 复制到 /usr/local/lib(即其他 opencv 动态链接库存放的目录) 目录下

* Matrix Typenames
The general rule for Matrices typenames in OpenCV is:

 CV_<bit_depth>(S|U|F)C<number_of_channels>

S = Signed integer
U = Unsigned integer
F = Float 

So depending on which one of the previous letters (S,U,F) you have, you will be casting <int>, <unsigned integer> or <float>.
* SVM::train(...)
  Bad argument 
  (in the case of classification problem the responses must be categorical; 
   either specify varType when creating TrainData, or pass integer responses) in train

http://stackoverflow.com/questions/31287207/opencv-svm-training-data
bool train (InputArray samples, int layout, InputArray responses)

The type of responses cannot be float or double.

Change

float labels[4] = { 1.0, -1.0, -1.0, -1.0 };
Mat labelsMat(4, 1, CV_32FC1, labels);

to

int labels[4] = { 1, -1, -1, -1 };
Mat labelsMat(4, 1, CV_32S, labels);

BTW, if you are using Linear kernel, the only parameter is C, so you do not need to setGamma.

Another problem is the way to get the predicted response. Since each time there is only one
 sample to predict, if you want to use the return value as the response, you should not pass
 res to predict.

You can change

float response = svm->predict(sampleMat, res);

to

float response = svm->predict(sampleMat);

Otherwise, if you want to use res, then the return value is no longer the response value. 
But you can get the response from res instead.

You can change

if (response == 1)
    image.at<Vec3b>(i, j) = green;
else if (response == -1)
    image.at<Vec3b>(i, j) = blue;
}

to

if (res.at<float>(0) == 1)
    image.at<Vec3b>(i, j) = green;
else if (res.at<float>(0) == -1)
    image.at<Vec3b>(i, j) = blue;
}

